<?php
/**
 * Template Name: Homey Membership Subscriptions Webhook
 */
get_header();
global $homey_local, $homey_prefix, $wpdb;

//<editor-fold desc="init variables code">
    require_once(HOMEY_PLUGIN_PATH . '/includes/stripe-php/init.php');
    define('PAYPAL_SANDBOX', true);

//$paypal_client_id = 'AZxYj4mbzgBKtc42DgzUImYDnfVfMnVGD3eY03lSloBSbBhZ1PreAqKgF_eyGaFC14pmrAFIa3w5WUrl';//we will get from db
//$paypal_client_secret = 'EGaSettT-AqLz7C-DojJEp4GiMmKBaxAtcrMvbOzQnT5mKcfdiJSh8JynAS7NtwcpgBUxx_hNm3lkSeN';//we will get from db

    $paypal_client_id = homey_option('paypal_client_id');
    $paypal_client_secret = homey_option('paypal_client_secret_key');

    define('PAYPAL_URL', (PAYPAL_SANDBOX == true) ? "https://www.sandbox.paypal.com/cgi-bin/webscr" : "https://www.paypal.com/cgi-bin/webscr");
    define('PAYPAL_CLIENT_ID', $paypal_client_id);
    define('PAYPAL_CLIENT_SECRET', $paypal_client_id);

    $allowed_html = array();

    $current_user = wp_get_current_user();
    $userID = $current_user->ID;
    $user_email = $current_user->user_email;
    $admin_email = get_bloginfo('admin_email');
    $username = $current_user->user_login;

    $date = date('Y-m-d g:i:s', current_time('timestamp', 0));

    $payload = @file_get_contents('php://input');
    $postID = -1;

    if(isset($_GET['postId'])){
        $postID = $_GET['postId'];
    }

    if(isset($_GET['hm_planID'])){
        $postID = $_GET['hm_planID'];
    }

    function getPaypalAccessToken($paypal_client_id, $paypal_client_secret)
    {
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api.sandbox.paypal.com/v1/oauth2/token');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
        curl_setopt($ch, CURLOPT_USERPWD, $paypal_client_id . ':' . $paypal_client_secret);

        $headers = array();
        $headers[] = 'Accept: application/json';
        $headers[] = 'Accept-Language: en_US';
        $headers[] = 'Content-Type: application/x-www-form-urlencoded';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = json_decode(curl_exec($ch));

        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        return $result->access_token;
    }
    $access_token = getPaypalAccessToken($paypal_client_id, $paypal_client_secret);
    $create_listing_link = homey_get_template_link('template/dashboard-submission.php');
//</editor-fold>

//<editor-fold desc="Webhook related code">

if (!empty($payload)) {
    if (isset($_SERVER['HTTP_STRIPE_SIGNATURE'])) {//if payload is from stripe or not
        //handle here stripe webhook function
        $postID = handle_hm_stripe_webhook($payload, $current_user, $date);
    } else {//check if valid paypal payload or not
        //handle here paypal webhook function
        $postID = handle_hm_paypal_webhook($payload, $current_user, $date);
    }
}

function handle_hm_stripe_webhook($payload = null, $current_user, $date)
{
    $sig_header = $_SERVER['HTTP_STRIPE_SIGNATURE'];
    $event = null;

    //for stripe webhooks
    $stripe_secret_key = homey_option('stripe_secret_key');

    // Set your secret key: remember to change this to your live secret key in production
    // See your keys here: https://dashboard.stripe.com/account/apikeys
    \Stripe\Stripe::setApiKey($stripe_secret_key);

    // If you are testing your webhook locally with the Stripe CLI you
    // can find the endpoint's secret by running `stripe listen`
    // Otherwise, find your endpoint's secret in your webhook settings in the Developer Dashboard
    $endpoint_secret = homey_option('stripe_webhook_secret');

    try {
        $event = \Stripe\Webhook::constructEvent(
            $payload, $sig_header, $endpoint_secret
        );
    } catch (\UnexpectedValueException $e) {
        // Invalid payload
        http_response_code(400);
        exit();
    } catch (\Stripe\Exception\SignatureVerificationException $e) {
        // Invalid signature
        http_response_code(400);
        exit();
    }

    if (isset($event->type)) {
        // Handle the event
        switch ($event->type) {
            case 'customer.subscription.deleted':

                $intent = $event->data->object;

                file_put_contents('log_stripe_mem_' . date("j.n.Y") . '.log', $intent, FILE_APPEND);

                break;
            // ... handle other event types
            default:
                // Unexpected event type
                http_response_code(400);
                exit();
        }//end of stripe webhook events
        $post_data = array();//we will put all necessary data here in $post_data array
        save_membership_subscription_post($post_data);
    }
}//end of handle_hm_stripe_webhook()

function handle_hm_paypal_webhook($payload = null, $current_user, $date)
{
    //prepare post data array
    $raw_post_array = explode('&', $payload);

    $myPost = array();
    foreach ($raw_post_array as $keyval) {
        $keyval = explode('=', $keyval);
        if (count($keyval) == 2)
            $myPost[$keyval[0]] = urldecode($keyval[1]);
    }

    // Read the post from PayPal system and add 'cmd'
    $req = 'cmd=_notify-validate';
    if (function_exists('get_magic_quotes_gpc')) {
        $get_magic_quotes_exists = true;
    }

    foreach ($myPost as $key => $value) {
        if ($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1) {
            $value = urlencode(stripslashes($value));
        } else {
            $value = urlencode($value);
        }
        $req .= "&$key=$value";
    }

    /*
     * Post IPN data back to PayPal to validate the IPN data is genuine
     * Without this step anyone can fake IPN data
     */
    $paypalURL = PAYPAL_URL;
    $ch = curl_init($paypalURL);
    if ($ch == FALSE) {
        return FALSE;
    }

    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $req);
    curl_setopt($ch, CURLOPT_SSLVERSION, 6);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);

    // Set TCP timeout to 30 seconds
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Connection: Close', 'User-Agent: company-name'));
    $res = curl_exec($ch);

    /*
     * Inspect IPN validation result and act accordingly
     * Split response headers and payload, a better way for strcmp
     */
    $tokens = explode("\r\n\r\n", trim($res));
    $res = trim(end($tokens));

    if (strcmp($res, "VERIFIED") == 0 || strcasecmp($res, "VERIFIED") == 0) {
        // Retrieve transaction data from PayPal
        $paypalInfo = $_POST;
        $subscr_id = $paypalInfo['subscr_id'];
        $payer_email = $paypalInfo['payer_email'];
        $item_name = $paypalInfo['item_name'];
        $itemPrice = $paypalInfo['item_price'];
        $stripePlanId = $item_number = $paypalInfo['item_number'];
        $txn_id = !empty($paypalInfo['txn_id']) ? $paypalInfo['txn_id'] : '';
        $payment_gross = !empty($paypalInfo['mc_gross']) ? $paypalInfo['mc_gross'] : 0;
        $currency_code = $paypalInfo['mc_currency'];
        $subscr_period = !empty($paypalInfo['period3']) ? $paypalInfo['period3'] : floor($payment_gross / $itemPrice);
        $payment_status = !empty($paypalInfo['payment_status']) ? $paypalInfo['payment_status'] : '';
        $custom = $paypalInfo['custom'];
        $subscr_date = !empty($paypalInfo['subscr_date']) ? $paypalInfo['subscr_date'] : date("Y-m-d H:i:s");
        $dt = new DateTime($subscr_date);
        $subscr_date = $dt->format("Y-m-d H:i:s");
        $subscr_date_valid_to = date("Y-m-d H:i:s", strtotime(" + $subscr_period month", strtotime($subscr_date)));

        if (!empty($txn_id)) {

            // Check if transaction data exists with the same TXN ID
            $isAlreadySubscribed = homey_is_stripe_id_used($txn_id);

            $order_number = '';

            if ($isAlreadySubscribed > -1) {

                //get already used $order_number
                $order_number = get_post_meta($isAlreadySubscribed, 'hm_subscription_detail_order_number', true);

            } else {

                //get membership information from homey DB
                $membershipInfo = homey_get_membership_detail($stripePlanId);

                $postID = isset($membershipInfo->ID) ? $membershipInfo->ID : -1;

                //get total number of allowed listings
                $totalAllowedListings = get_post_meta($postID, 'hm_settings_listings_included', true);

                $purchase_date = $subscr_date;
                $expiry_date = $subscr_date_valid_to;

                //save subscription for homey DB
                $subscriptionInfo = array(
                    'ID' => '',
                    'post_title' => $payer_email,
                    'post_content' => '',
                    'post_status' => 'publish',
                    'post_author' => get_current_user_id(),
                    'post_type' => "hm_subscriptions"
                );

                //inserting post wp_insert_post() will return ID of inserted post
                $subscription_ID = wp_insert_post($subscriptionInfo);

                //generate stripe invoice number
                $stripeInvoiceNumber = rand(111111111, 999999999);

                if (empty($order_number)) {
                    $order_number = $stripeInvoiceNumber;
                }
            }
        }
        $post_data = array();//we will put all necessary data here in $post_data array
        save_membership_subscription_post($post_data);
    }
}//end of handle_hm_paypal_webhook()

function save_membership_subscription_post($paymentMethod = null, $data)
{
    $current_user = wp_get_current_user();
    $all_vairables = '';
    $counter = 0;
    $postID = $_GET['hm_planID'];
    $hm_planID = $_GET['hm_planID'];
    $hm_planInfo = get_post($hm_planID);

    $memberships = array();
    $order_number = '';

    if ($paymentMethod == 'paypal') {
        $order_number = $data['txn_id'];
        if(homey_is_paypal_id_used($data['txn_id']) == 0){
            $order_number = $paypalSubscription_ID = $data['plan_id'];//$stripeSubscriptionInfo['id'];
            $purchase_date = $data['start_time'];//$stripeSubscriptionInfo['current_period_start'];
            $expiry_date = $data['next_billing_time'];//$stripeSubscriptionInfo['current_period_end'];
            $latest_invoice = $data['txn_id'];//$stripeSubscriptionInfo['latest_invoice'];

            //get total number of allowed listings for selected plan
            $hm_settings_bill_period = get_post_meta($postID, 'hm_settings_bill_period', true);
            $totalAllowedListings    = get_post_meta($postID, 'hm_settings_listings_included', true);

            //save subscription to homey DB
            $subscriptionInfo = array(
                'post_title' => $data['email_address'],//$stripeCustomerInfo['email'],
                'post_content' => $data['email_address'].' subscribed to plan <strong>'.$hm_planInfo->post_title.'</strong>',
                'post_status' => 'publish',
                'post_author' => $current_user->ID,
                'post_type' => "hm_subscriptions"
            );
            //inserting post wp_insert_post() will return ID of inserted post
            $subscription_ID = wp_insert_post($subscriptionInfo);

            // update post meta for saved subscription in homey DB
            add_post_meta($subscription_ID, 'hm_subscription_detail_session_id', $data['txn_id']);
            add_post_meta($subscription_ID, 'hm_subscription_detail_status', 'active');
            add_post_meta($subscription_ID, 'hm_subscription_detail_payment_gateway', $paymentMethod);
            add_post_meta($subscription_ID, 'hm_subscription_detail_order_number', $data['txn_id']);
            add_post_meta($subscription_ID, 'hm_subscription_detail_plan_id', $postID);
            add_post_meta($subscription_ID, 'hm_subscription_detail_sub_id', $data['txn_id']);
            add_post_meta($subscription_ID, 'hm_subscription_detail_total_listings', $totalAllowedListings);
            add_post_meta($subscription_ID, 'hm_subscription_detail_remaining_listings', $totalAllowedListings);
            add_post_meta($subscription_ID, 'hm_subscription_detail_purchase_date', $data['start_time']);
            add_post_meta($subscription_ID, 'hm_subscription_detail_expiry_date', $data['next_billing_time']);
        }

        //end of save subscription
    }
    return $order_number;
}
//</editor-fold>

?>

<?php
if (isset($_REQUEST['is_homey_membership'])) {
    $paymentMethod = isset($_REQUEST['payment_gateway']) ? $_REQUEST['payment_gateway'] : 'stripe';

    //<editor-fold desc=" stripe request processing after payment is paid">
    if (isset($_REQUEST['is_homey_membership']) && $paymentMethod == 'stripe') {
        if (isset($_REQUEST['session_id'])) {
            $stripe = new \Stripe\StripeClient(
                homey_option('stripe_secret_key')
            );

            $stripeSessionInfo = $stripe->checkout->sessions->retrieve($_REQUEST['session_id']);
            $isAlreadySubscribed = homey_is_stripe_id_used($_REQUEST['session_id']);

            if ($isAlreadySubscribed > 0) {
                $order_number = get_post_meta($isAlreadySubscribed, 'hm_subscription_detail_order_number', true);
            }

            $stripeCustomerInfo = $stripe->customers->retrieve($stripeSessionInfo->customer);

            $stripePlanId = $stripeSessionInfo->display_items[0]->plan->id;

            if (isset($stripeCustomerInfo->id) && $isAlreadySubscribed == 0 ) {
                if ($postID > 0) {
                    $stripePlanInfo = $stripe->plans->retrieve($stripePlanId);

                    $stripeSubscriptionInfo = $stripe->subscriptions->retrieve($stripeSessionInfo['subscription']);

                    $totalAllowedListings = get_post_meta($postID, 'hm_settings_listings_included', true);
                    $totalRemainingListings = get_post_meta($postID, 'hm_subscription_detail_remaining_listings', true);
                    $purchase_date = $stripeSubscriptionInfo['current_period_start'];
                    $expiry_date = $stripeSubscriptionInfo['current_period_end'];

                    //save subscription
                    $subscriptionInfo = array(
                        'ID' => '',
                        'post_title' => $stripeCustomerInfo['email'],
                        'post_content' => '',
                        'post_status' => 'publish',
                        'post_author' => get_current_user_id(),
                        'post_type' => "hm_subscriptions"
                    );

                    $stripeInvoiceInfo = $stripe->invoices->retrieve($stripeSubscriptionInfo['latest_invoice']);
                    $stripeInvoiceNumber = $order_number = $stripeInvoiceInfo['number'];

                    $subID = wp_insert_post($subscriptionInfo);

                    add_post_meta($subID, 'hm_subscription_detail_status', 'active');
                    add_post_meta($subID, 'hm_subscription_detail_payment_gateway', 'stripe');
                    add_post_meta($subID, 'hm_subscription_detail_order_number', $stripeInvoiceNumber);
                    add_post_meta($subID, 'hm_subscription_detail_session_id', $_REQUEST['session_id']);
                    add_post_meta($subID, 'hm_subscription_detail_plan_id', $postID);
                    add_post_meta($subID, 'hm_subscription_detail_sub_id', $stripeSubscriptionInfo['id']);
                    add_post_meta($subID, 'hm_subscription_detail_total_listings', $totalAllowedListings);
                    add_post_meta($subID, 'hm_subscription_detail_remaining_listings', $totalAllowedListings);
                    add_post_meta($subID, 'hm_subscription_detail_purchase_date', date('d/M/Y h:i:s', $purchase_date));
                    add_post_meta($subID, 'hm_subscription_detail_expiry_date', date('d/M/Y h:i:s', $expiry_date));
                    //end of save subscription
                }
            }
        }

    }
    //</editor-fold>
    //<editor-fold desc="paypal request processing after payment is paid">
    elseif ((isset($_REQUEST['is_homey_membership']) && $paymentMethod == 'paypal')) {
        $trxn_info = array();
        if (isset($_GET['subscriptionID'])) {
            $is_paypal_live = homey_option('paypal_api');
            $host = 'https://api.sandbox.paypal.com';
            // Check if paypal live
            if ($is_paypal_live == 'live') {
                $host = 'https://api.paypal.com';
            }

            $url = $host."/v1/billing/subscriptions/".$_GET['subscriptionID'];
            $subscriptionInfo = homey_execute_curl_request($url, null, $access_token, false);

            // Get transaction information from URL
            $data["plan_status"]        = $subscriptionInfo['status'];
            $data["plan_id"]            = $subscriptionInfo['plan_id'];
            $data["txn_id"]             = $subscriptionInfo['id'];
            $data["payer_name"]         = $subscriptionInfo['subscriber']['name']['given_name'].' '.$subscriptionInfo['subscriber']['name']['surname'];
            $data["email_address"]      = $subscriptionInfo['subscriber']['email_address'];
            $data["payer_id"]           = $subscriptionInfo['subscriber']['payer_id'];
            $data["currency_code"]      = $subscriptionInfo['billing_info']['last_payment']['amount']['currency_code'];
            $data["start_time"]         = $subscriptionInfo['start_time'];

            if(isset($subscriptionInfo['billing_info']['next_billing_time'])){
                $data["next_billing_time"]  = $subscriptionInfo['billing_info']['next_billing_time'];
            }

            $order_number = save_membership_subscription_post('paypal', $data);
        }
    }
    //</editor-fold>
    //<editor-fold desc="init post related information">
    if ($postID > -1) {
        $membershipInfo = get_post($postID);
        $billing_period = get_post_meta($postID, 'hm_settings_bill_period', true);
        $billing_frequency = get_post_meta($postID, 'hm_settings_billing_frequency', true);
        $listings_included = get_post_meta($postID, 'hm_settings_listings_included', true);
        $unlimited_listings = get_post_meta($postID, 'hm_settings_unlimited_listings', true);

        $featured_listings = get_post_meta($postID, 'hm_settings_featured_listings', true);
        $stripe_package_id = get_post_meta($postID, 'hm_settings_stripe_package_id', true);
        $visibility = get_post_meta($postID, 'hm_settings_visibility', true);
        $images_per_listing = get_post_meta($postID, 'hm_settings_images_per_listing', true);
        $unlimited_images = get_post_meta($postID, 'hm_settings_unlimited_images', true);
        $taxes = get_post_meta($postID, 'hm_settings_taxes', true);
        $popular_featured = get_post_meta($postID, 'hm_settings_popular_featured', true);
        $custom_link = get_post_meta($postID, 'hm_settings_custom_link', true);
        $package_price = $package_total_price = get_post_meta($postID, 'hm_settings_package_price', true);

        if($taxes > 0){
            $package_total_price = $package_price + ($package_price / $taxes);
        }
    }
    //</editor-fold>

}
?>

    <section class="main-content-area">
        <div class="container">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <div class="page-title">
                        <div class="block-top-title">
                            <?php get_template_part('template-parts/breadcrumb'); ?>
                            <h2><?php the_title(); ?></h2>
                        </div><!-- block-top-title -->
                    </div><!-- page-title -->
                </div><!-- col-xs-12 col-sm-12 col-md-12 col-lg-12 -->
            </div><!-- .row -->
        </div><!-- .container -->

        <div class="container">
            <?php
            if (isset($_REQUEST['limit-exceeded'])) { ?>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-8 col-md-offset-2 col-lg-offset-2">
                        <h3 class="error">You have to subscribe from following plans to 'Add New Listings'.</h3>
                    </div>
                </div>
            <?php } ?>
            <?php
            if (isset($_REQUEST['success'])) {
                ?>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-8 col-md-offset-2 col-lg-offset-2">
                        <div class="membership-package-wrap">
                            <div class="block">
                                <div class="block-title">
                                    <div class="block-left">
                                        <h2 class="title">Thank you for your payment!</h2>
                                    </div><!-- block-left -->
                                </div>
                                <div class="block-body">
                                    The order <strong>#<?php echo $order_number; ?></strong> has been completed (Payment
                                    method: <?php echo $paymentMethod; ?>) and a confirmation email has been sent to
                                    <strong><?php echo $current_user->user_email ?></strong>
                                </div><!-- block-body -->
                            </div><!-- block -->
                            <div class="block">
                                <div class="block-title">
                                    <div class="block-left">
                                        <h2 class="title">Order Summary</h2>
                                    </div><!-- block-left -->
                                </div>
                                <div class="block-body">
                                    <ul class="list-unstyled mebership-list-info">
                                        <li><i class="fa fa-check" aria-hidden="true"></i> Package
                                            <strong><?php echo isset($membershipInfo->post_title) ? $membershipInfo->post_title : '-'; ?></strong>
                                        </li>
                                        <li><i class="fa fa-check" aria-hidden="true"></i> Price
                                            <strong>$<?php echo $package_price; ?></strong></li>
                                        <li><i class="fa fa-check" aria-hidden="true"></i> Time Period:
                                            <strong><?php echo $billing_frequency . ' ' . $billing_period; ?></strong>
                                        </li>
                                        <li><i class="fa fa-check" aria-hidden="true"></i> Listings:
                                            <strong><?php echo $listings_included; ?></strong></li>
                                        <li><i class="fa fa-check" aria-hidden="true"></i> Featured Listings:
                                            <strong><?php echo $featured_listings; ?></strong></li>
                                        <!--                                    <li><i class="fa fa-check" aria-hidden="true"></i> Taxes <strong>-->
                                        <?php //echo $taxes;
                                        ?><!--%</strong></li>-->
                                        <li class="total-price">Total Price
                                            <strong>$<?php echo $package_total_price; ?></strong></li>
                                    </ul>
                                </div><!-- block-body -->
                            </div><!-- block -->
                        </div><!-- membership-package-wrap -->
                        <div class="membership-nav-wrap">
                            <button class="btn btn-primary btn-block" onclick="window.location.href='<?php echo $create_listing_link; ?>'">Create a
                                Listing
                            </button>
                        </div>
                    </div><!-- col-xs-12 col-sm-12 col-md-8 col-lg-8 -->
                </div><!-- .row -->
                <?php
            }
            if (isset($_REQUEST['cancel'])) {
                ?>
                <h1><?php echo __("Your payment wasn't successful give it another try."); ?> </h1>

                <?php
            } else {
                ?><!--cancel message html-->
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <?php if(isset($_GET['listing-limit-completed'])){ ?>
                            <p class="error text-danger">You have used all of your allowed listings, please subscribe from following plans</p>
                        <?php } ?>
                        <div class="membership-package-wrap">
                            <div class="row no-margin">
                                <?php
                                wp_reset_postdata();
                                //set the $args
                                $args = array(
                                    'post_type' => 'hm_homey_memberships',
                                    'post_status' => 'publish',
                                    'order' => 'ASC',
                                    'orderby' => 'post__in'
                                );
                                //do the query
                                $plans_query = new WP_Query($args);

                                if ($plans_query->have_posts()) {
                                    while ($plans_query->have_posts()) {
                                        $plans_query->the_post();
                                        $is_featured = get_post_meta(get_the_ID(), 'hm_settings_popular_featured', true);
                                        $is_visible = get_post_meta(get_the_ID(), 'hm_settings_visibility', true);
                                        if ($is_visible == 'yes') { ?>
                                            <div class="col-sm-3">
                                                <?php $price_table_name = ($is_featured == 'yes') ? 'featured-price-table' : 'price-table' ?>
                                                <?php get_template_part("template-parts/memberships/$price_table_name"); ?>
                                            </div>
                                        <?php }
                                    }
                                } else {
                                    ?>
                                    <h1><?php echo __("No plans are available to subscribe."); ?> </h1>
                                <?php }
                                wp_reset_postdata();
                                ?>
                            </div>
                        </div><!-- membership-package-wrap -->
                    </div><!-- col-xs-12 col-sm-12 col-md-12 col-lg-12 -->
                </div><!-- .row -->
            <?php } ?>
        </div>   <!-- .container -->

    </section><!-- main-content-area listing-page grid-listing-page -->
<?php get_footer(); ?>